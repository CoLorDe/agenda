{"version":3,"sources":["data/todosData.js","atoms.js","components/ToDo.js","components/ToDoList.js","components/AddToDo.js","App.js","reportWebVitals.js","index.js"],"names":["todosData","id","text","completed","listState","atom","key","default","completedState","atomFamily","ToDo","props","useRecoilState","isCompleted","setIsCompleted","list","setList","className","style","textDecoration","type","checked","onChange","prevState","onClick","newList","slice","ToDoList","toDoList","useRecoilValue","map","todo","AddToDo","useState","value","setValue","setTodoList","useSetRecoilState","for","autoFocus","required","target","oldTodoList","length","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAaeA,EAbG,CACd,CACIC,GAAI,EACJC,KAAM,eACNC,WAAW,GAEf,CACIF,GAAI,EACJC,KAAM,OACNC,WAAW,ICLNC,EAAYC,YAAK,CAC5BC,IAAK,YACLC,QAASP,IAGEQ,EAAiBC,YAAW,CACvCH,IAAK,qBACLC,SAAS,I,qBC4BIG,MAjCf,SAAcC,GACZ,MAAsCC,YAAeJ,EAAeG,EAAMV,KAA1E,mBAAOY,EAAP,KAAoBC,EAApB,KACA,EAAwBF,YAAeR,GAAvC,mBAAOW,EAAP,KAAaC,EAAb,KAaA,OACE,sBAAKC,UAAU,eAAf,UACE,gCACE,qBAAKA,UAAU,QACf,mBAAGC,MAAOL,EARO,CACrBM,eAAgB,gBAO6B,KAAzC,SAAgDR,EAAMT,UAExD,gCACE,uBACEe,UAAU,WACVG,KAAK,WACLC,QAASR,EACTS,SAtBe,kBAAMR,GAAe,SAAAS,GAAS,OAAKA,QAuBpD,wBAAQN,UAAU,SAASO,QArBd,WACjB,IAAMC,EAAO,sBAAOV,EAAKW,MAAM,EAAGf,EAAMV,GAAG,IAA9B,YAAqCc,EAAKW,MAAMf,EAAMV,MACnEe,EAAQS,IAmBJ,2BCfOE,MAZf,WACE,IAAMC,EAAWC,YAAezB,GAEhC,OACE,8BACGwB,EAASE,KAAI,SAACC,GAAD,OACZ,cAAC,EAAD,eAAwBA,GAAbA,EAAK9B,UCsBT+B,MA9Bf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAcC,YAAkBjC,GAmBtC,OACE,sBAAKa,UAAU,WAAf,UACE,uBAAOqB,IAAI,WAAX,sBACA,uBAAOrB,UAAU,aAAaG,KAAK,OAAOnB,GAAG,WAAWsC,WAAS,EAACC,SAAS,WAAWN,MAAOA,EAAOZ,SAPvF,SAAC,GAAuB,IAAbY,EAAY,EAArBO,OAASP,MAC1BC,EAASD,MAOP,wBAAQjC,GAAG,SAASuB,QArBZ,WACI,KAAVU,GACFE,GAAY,SAACM,GAAD,4BACPA,GADO,CAEV,CACEzC,GAAIyC,EAAYC,OAAO,EACvBzC,KAAMgC,EACN/B,WAAW,SAcf,qBCCSyC,MAtBf,WACE,OACE,gCACE,qBAAK3B,UAAU,SAAf,SACE,4CAEF,8BACE,cAAC,IAAD,UACE,sBAAKA,UAAU,OAAf,UACE,qBAAKA,UAAU,UAAf,SACE,cAAC,EAAD,MAEF,qBAAKA,UAAU,OAAf,SACE,cAAC,EAAD,iBCTC4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.06b11f63.chunk.js","sourcesContent":["const todosData = [\r\n    {\r\n        id: 1,\r\n        text: \"Add features\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 2,\r\n        text: \"Test\",\r\n        completed: false\r\n    }\r\n];\r\n\r\nexport default todosData;\r\n","import { atom, atomFamily } from \"recoil\";\r\n\r\nimport todosData from \"./data/todosData\"\r\n\r\nexport const listState = atom({\r\n  key: 'listState',\r\n  default: todosData,\r\n});\r\n\r\nexport const completedState = atomFamily({\r\n  key: \"toDoCompletedState\",\r\n  default: false,\r\n})\r\n","import React from \"react\";\r\nimport { useRecoilState } from 'recoil';\r\n\r\nimport {  listState, completedState } from \"../atoms\"\r\n\r\n\r\nfunction ToDo(props) {\r\n  const [isCompleted, setIsCompleted] = useRecoilState(completedState(props.id));\r\n  const [list, setList] = useRecoilState(listState);\r\n\r\n  const toggleComplete = () => setIsCompleted(prevState => !prevState);\r\n\r\n  const deleteTodo = () => {\r\n    const newList = [...list.slice(0, props.id-1), ...list.slice(props.id)];\r\n    setList(newList);\r\n  };\r\n\r\n  const completedStyle = {\r\n    textDecoration: \"line-through\"\r\n  }\r\n\r\n  return (\r\n    <div className=\"todo-element\">\r\n      <div>\r\n        <div className=\"dot\"></div>\r\n        <p style={isCompleted ? completedStyle : null}>{props.text}</p>\r\n      </div>\r\n      <div>\r\n        <input\r\n          className=\"checkbox\"\r\n          type=\"checkbox\"\r\n          checked={isCompleted}\r\n          onChange={toggleComplete} />\r\n        <button className=\"delete\" onClick={deleteTodo}>Delete</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDo;\r\n","import React from \"react\";\r\nimport { useRecoilValue } from \"recoil\";\r\n\r\nimport { listState } from \"../atoms\";\r\nimport ToDo from \"./ToDo\";\r\n\r\nfunction ToDoList() {\r\n  const toDoList = useRecoilValue(listState);\r\n\r\n  return (\r\n    <div>\r\n      {toDoList.map((todo) => (\r\n        <ToDo key={todo.id} {...todo} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ToDoList;\r\n","import React, { useState } from \"react\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport { listState } from \"../atoms\";\r\n\r\nfunction AddToDo() {\r\n  const [value, setValue] = useState(\"\");\r\n  const setTodoList = useSetRecoilState(listState);\r\n\r\n  const add = () => {\r\n    if (value !== \"\") {\r\n      setTodoList((oldTodoList) => [\r\n        ...oldTodoList,\r\n        {\r\n          id: oldTodoList.length+1,\r\n          text: value,\r\n          completed: false,\r\n        },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const onChange = ({target: {value}}) => {\r\n    setValue(value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"add-todo\">\r\n      <label for=\"add-todo\">New Task</label>\r\n      <input className=\"text-field\" type=\"text\" id=\"add-todo\" autoFocus required=\"required\" value={value} onChange={onChange} />\r\n      <button id=\"submit\" onClick={add}>Add</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddToDo;\r\n","import React from \"react\";\nimport { RecoilRoot } from 'recoil';\n\nimport './App.css';\nimport ToDoList from \"./components/ToDoList\";\nimport AddToDo from \"./components/AddToDo\";\n\n\nfunction App() {\n  return (\n    <div>\n      <div className=\"header\">\n        <h1>ToDo App</h1>\n      </div>\n      <div>\n        <RecoilRoot>\n          <div className=\"main\">\n            <div className=\"sidebar\">\n              <AddToDo />\n            </div>\n            <div className=\"list\">\n              <ToDoList />\n            </div>\n          </div>\n        </RecoilRoot>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}